package ch.heigvd.res.stpatrick;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;

import static org.junit.Assert.*;

/**
 * *** IMPORTANT WARNING : DO NOT EDIT THIS FILE ***
 * <p>
 * This file is used to specify what you have to implement. To check your work,
 * we will run our own copy of the automated tests. If you change this file,
 * then you will introduce a change of specification!!!
 *
 * @author Olivier Liechti
 */
public class ApplicationTest {

    String input = "Always remember to forget the friends that proved untrue, but never forget to remember those that have stuck by you. A lot of us know that, we know it well. Itâ€™s a great phrase.";


    /**
     * This test specifies the expected behavior of the default stream processor
     * provided by the factory. This processor should read all characters from
     * the input reader and write them to the output writer (without transforming
     * them).
     */
    @Test
    public void itShouldBePossibleToTransformAStream() throws IOException {
        Application application = new Application();
        IStreamProcessorsFactory factory = application.getStreamProcessorsFactory();
        IStreamProcessor processor = factory.getProcessor();
        StringReader inputReader = new StringReader(input);
        StringWriter outputWriter = new StringWriter();
        try {
            processor.process(inputReader, outputWriter);
            String output = outputWriter.toString();
            // here is the assertion: we should have copied all characters from the reader to the writer
            assertEquals(input, output);
        } catch (IOException e) {
            throw e;
        }
    }

    /**
     * This test specifies the expected behavior of a stream processor called
     * "e-remover" (which you have to implement). The client asks the factory
     * to obtain an instance of this processor. Its behavior is simple: it
     * copies all characters from the input reader to the output writer, except
     * for the characters 'e' and 'E'.
     */
    @Test
    public void itShouldBePossibleToGetRemoveECharactersFromAStream() throws IOException, UnknownNameException {
        Application application = new Application();
        IStreamProcessorsFactory factory = application.getStreamProcessorsFactory();
        IStreamProcessor processor = factory.getProcessor("e-remover");
        StringReader inputReader = new StringReader(input);
        StringWriter outputWriter = new StringWriter();
        try {
            processor.process(inputReader, outputWriter);
            String output = outputWriter.toString();
            // Here are the assertions: we check that no 'e' and 'E' have been written
            // to the writer
            assertEquals(-1, output.indexOf('e'));
            assertEquals(-1, output.indexOf('E'));
            // We also check that the length of the output string is correct
            int numberOfEs = StringUtils.countMatches(input.toLowerCase(), "e");
            assertEquals(input.length() - numberOfEs, output.length());
            // We check the result
            String expectedString = StringUtils.replaceChars(input, "eE", "");
            assertEquals(expectedString, output);

        } catch (IOException e) {
            throw e;
        }
    }


}
